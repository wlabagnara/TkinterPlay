""" 
    Continuous real-time (animated) data plotting!

    references:
        https://www.youtube.com/watch?v=Ercd-Ip5PfQ

    Notes: 
        See partner file 'data_gen.py' used in demo.
        Using 'py plots' object here, but also should learn how to use 'subplots' - very useful
        
"""

import random
from itertools import count
from numpy import block
import pandas as pd
from matplotlib import pyplot as plt # Using 'py plots' object here, but there is also a very useful 'subplot'
# import matplotlib.pyplot as plt # (same as above line) 

plt.style.use('fivethirtyeight') # makes plots nicer

def plot1():
    """ very simple plot of static data"""
    x_vals = [0,1,2,3,4,5]
    y_vals = [0,1,3,2,3,5]

    plt.plot(x_vals, y_vals)
    plt.tight_layout()
    plt.show()


def plot2():
    """ plots the animated data generated by the simple 'animate()' method"""
    from matplotlib.animation import FuncAnimation

    x_vals = []
    y_vals = []

    index = count()

    def animate(i):
        x_vals.append(next(index))
        y_vals.append(random.randint(0,5))
        plt.cla() # clear axis to avoid plotting over itself (eg. - see changing colors!)
        plt.plot(x_vals, y_vals)    

    ani = FuncAnimation(plt.gcf(), animate, interval=1000) # gcf = 'get current figure'; func to call; interval (in ms)
    plt.tight_layout()
    plt.show()


def plot3():
    """ 
		plots the animated data generated by the 'slicker'
		'animate_with_csv()' method and 'data_gen()' method/thread.
	"""
    from matplotlib.animation import FuncAnimation

    # x_vals = []
    # y_vals = []

    # index = count()

    def animate_with_csv(i):
        data = pd.read_csv('data.csv')
        x = data['x_value']
        y1 = data['total_1']
        y2 = data['total_2']        
        plt.cla() # clear axis to avoid plotting over itself (eg. - see changing colors!)
                  # Note: there is a way to 'not have to clear' but more complicated...
        plt.plot(x, y1, label='Channel 1')
        plt.plot(x, y2, label='Channel 2')

        plt.legend(loc='upper left') # b/c cla() will also clear labels! Placing legend away from moving data as well 
        plt.tight_layout()
    

    ani = FuncAnimation(plt.gcf(), animate_with_csv, interval=1000) # gcf = 'get current figure'; func to call; interval (ms)
    plt.tight_layout()
    plt.show()


def data_gen():
    """ 
        Simulate continuous (animated) data - by writing in real-time to a csv file
        
        Needs to run 'externally' or as a thread to keep writing to the csv file
            so that the other routine is reading and plotting the 'animated' data.

        If you want to run this method externally, copy to 'data_gen.py' and
        run as
        
        > python data_gen.py

    """
    import csv
    import random
    import time as t

    x_value = 0
    total_1 = 1000
    total_2 = 1000
    fieldnames = ["x_value", "total_1", "total_2"]
    
    with open('data.csv', 'w') as csv_file:
        csv_writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
        csv_writer.writeheader()

    while True:
        with open('data.csv', 'a') as csv_file:
            csv_writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
            info = {
                "x_value": x_value,
                "total_1": total_1,
                "total_2": total_2
            }
            csv_writer.writerow(info)
            print(x_value, total_1, total_2)
            x_value += 1
            total_1 = total_1 + random.randint(-6, 8)
            total_2 = total_2 + random.randint(-5, 6)
        t.sleep(1)


# call your example demo function!...
# plot1() # demo 1
# plot2() # demo 2
plot3() # demo 3